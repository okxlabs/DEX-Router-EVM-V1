pragma solidity 0.8.17;
// pragma solidity ^0.8.0;

import "forge-std/console2.sol";
import "forge-std/test.sol";
import "@dex/DexRouter.sol";

interface IProxyAdmin {
    function upgrade(address proxy, address newImplementation) external;
}

contract DualCommissionTest is Test {
    //https://polygonscan.com/tx/0xf85d4d106f3ede76c017eee286e8e194c9f8e6617c99dd3cf7fbc953313bfca9
    address dexRouter = 0xA748D6573acA135aF68F2635BE60CB80278bd855;
    address user = 0xf77887E86d0645d68EE9e3ecC31826B8e40C3ca5;
    //address USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;
    address proxyAdmin = 0x6CEa74418A513C95D0efa4D75349Cb1f6ee7A335;
    address owner = 0xE1C7Db7575BABF0d3369835678ec9b7F15c0886B;
    address referer1 = 0xEA522Fe3A65874bA3CEC38e912220282b7C71E97;
    address referer2 = 0x399EfA78cAcD7784751CD9FBf2523eDf9EFDf6Ad;
    address WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;
    address L3 = 0x46777C76dBbE40fABB2AAB99E33CE20058e76C59;
    //address tokenApprove = 0x3B86917369B83a6892f553609F3c2F439C184e31;

    function setUp() public {
        vm.createSelectFork(vm.envString("POLYGON_RPC_URL"), 66632796);
        address dualCommissionImpl = address(new DexRouter());
        vm.prank(owner);
        IProxyAdmin(proxyAdmin).upgrade(dexRouter, dualCommissionImpl);
    }

    function test_DualFromCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 ETH balance before",address(referer1).balance);
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000022220afc2aaa000000000064ea522fe3a65874ba3cec38e912220282b7c71e97000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee22220afc2aaa0000000000c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 544029664675771980}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 ETH balance after",address(referer1).balance);
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function test_SingleFromCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee3ca20afc2aaa0000000000c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 534029664675771980}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function test_SingleNoneFromCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee3ca20afc2aaa000000000000399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 534029664675771980}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function _test_SingleFromCommissionOverLimit() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee3ca20afc2aaa0000000001c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 544029664675771980}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function _test_DualFromCommissionOverLimit() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 ETH balance before",address(referer1).balance);
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000022220afc2aaa000000000064ea522fe3a65874ba3cec38e912220282b7c71e97000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee22220afc2aaa0000000001c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 518008774735498824}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 ETH balance after",address(referer1).balance);
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function test_swapNoCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 ETH balance before",address(referer1).balance);
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        console2.log("Referer1 L3 balance before",IERC20(L3).balanceOf(address(referer1)));
        console2.log("Referer2 L3 balance before",IERC20(L3).balanceOf(address(referer2)));
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000";
        (bool s, ) = dexRouter.call{value: 518008774735498824}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 ETH balance after",address(referer1).balance);
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        console2.log("Referer1 L3 balance after",IERC20(L3).balanceOf(address(referer1)));
        console2.log("Referer2 L3 balance after",IERC20(L3).balanceOf(address(referer2)));
        vm.stopPrank();
    }

    function _test_SingleToCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer2 L3 balance before",IERC20(L3).balanceOf(address(referer2)));
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046777C76dBbE40fABB2AAB99E33CE20058e76C593ca20afc2bbb0000000000c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 518008774735498824}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer2 L3 balance after",IERC20(L3).balanceOf(address(referer2)));
        vm.stopPrank();
    }

    function _test_DualToCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 L3 balance before",IERC20(L3).balanceOf(address(referer1)));
        console2.log("Referer2 L3 balance before",IERC20(L3).balanceOf(address(referer2)));
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000022220afc2bbb000000000064ea522fe3a65874ba3cec38e912220282b7c71e9700000000000000000000000046777C76dBbE40fABB2AAB99E33CE20058e76C5922220afc2bbb0000000000c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 518008774735498824}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 L3 balance after",IERC20(L3).balanceOf(address(referer1)));
        console2.log("Referer2 L3 balance after",IERC20(L3).balanceOf(address(referer2)));
        vm.stopPrank();
    }

    function _test_SingleToCommissionOverLimit() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer2 L3 balance before",IERC20(L3).balanceOf(address(referer2)));
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046777C76dBbE40fABB2AAB99E33CE20058e76C593ca20afc2bbb0000000001c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 518008774735498824}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer2 L3 balance after",IERC20(L3).balanceOf(address(referer2)));
        vm.stopPrank();
    }

    function _test_DualToCommissionOverLimit() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user L3 balance before",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 L3 balance before",IERC20(L3).balanceOf(address(referer1)));
        console2.log("Referer2 L3 balance before",IERC20(L3).balanceOf(address(referer2)));
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000730563c70a50e480000000000000000000000000000000000000000000000001c1ae936f17fe976000000000000000000000000000000000000000000000000000000006784944b00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000730563c70a50e48000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f650000000000000000000000000000000000000000000000000000000000000000100000000000000000000271033c4f0043e2e988b3c2e9c77e2c670efe709bfe30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710990f83d2f0807169c552c27cb193d300836d10980000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000046777c76dbbe40fabb2aab99e33ce20058e76c590000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000022220afc2bbb000000000064ea522fe3a65874ba3cec38e912220282b7c71e9700000000000000000000000046777C76dBbE40fABB2AAB99E33CE20058e76C5922220afc2bbb0000000001c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 518008774735498824}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user L3 balance after",IERC20(L3).balanceOf(address(user)));
        console2.log("Referer1 L3 balance after",IERC20(L3).balanceOf(address(referer1)));
        console2.log("Referer2 L3 balance after",IERC20(L3).balanceOf(address(referer2)));
        vm.stopPrank();
    }
}