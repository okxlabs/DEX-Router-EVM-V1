pragma solidity 0.8.17;
// pragma solidity ^0.8.0;

import "forge-std/console2.sol";
import "forge-std/test.sol";
import "@dex/DexRouter.sol";

interface IProxyAdmin {
    function upgrade(address proxy, address newImplementation) external;
}

contract DualCommissionTest is Test {
    //https://polygonscan.com/tx/0xac66f3ba1bb161d8d0b5e984cc1a7eabddbbc8971ec2035712653f157d8a8b0a
    address dexRouter = 0xA748D6573acA135aF68F2635BE60CB80278bd855;
    address user = 0xEA522Fe3A65874bA3CEC38e912220282b7C71E97;
    address USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;
    address proxyAdmin = 0x6CEa74418A513C95D0efa4D75349Cb1f6ee7A335;
    address owner = 0xE1C7Db7575BABF0d3369835678ec9b7F15c0886B;
    address referer1 = 0x358506b4C5c441873AdE429c5A2BE777578E2C6f;
    address referer2 = 0x399EfA78cAcD7784751CD9FBf2523eDf9EFDf6Ad;

    //address WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;
    //address tokenApprove = 0x3B86917369B83a6892f553609F3c2F439C184e31;

    function setUp() public {
        vm.createSelectFork(vm.envString("POLYGON_RPC_URL"), 66639013);
        address dualCommissionImpl = address(new DexRouter());
        vm.prank(owner);
        IProxyAdmin(proxyAdmin).upgrade(dexRouter, dualCommissionImpl);
    }

    function test_swapNoCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user USDT balance before",IERC20(USDT).balanceOf(address(user)));
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000033b1292589f502000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000051b2c41ef18e27000000000000000000000000000000000000000000000000000000006784c7fc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000018000000000000000000027103bfcb475e528f54246f1847ec0e7b53dd88bda4e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000";
        (bool s, ) = dexRouter.call{value: 0}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user USDT balance after",IERC20(USDT).balanceOf(address(user)));
        vm.stopPrank();
    }

    function test_SingleToCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user USDT balance before",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000033b1292589f502000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000051b2c41ef18e27000000000000000000000000000000000000000000000000000000006784c7fc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000018000000000000000000027103bfcb475e528f54246f1847ec0e7b53dd88bda4e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee3ca20afc2bbb0000000000c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 0}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user USDT balance after",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function test_SingleNoneToCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user USDT balance before",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000033b1292589f502000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000051b2c41ef18e27000000000000000000000000000000000000000000000000000000006784c7fc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000018000000000000000000027103bfcb475e528f54246f1847ec0e7b53dd88bda4e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee3ca20afc2bbb000000000000399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 0}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user USDT balance after",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function test_DualToCommission() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user USDT balance before",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer1 ETH balance before",address(referer1).balance);
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000033b1292589f502000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000051b2c41ef18e27000000000000000000000000000000000000000000000000000000006784c7fc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000018000000000000000000027103bfcb475e528f54246f1847ec0e7b53dd88bda4e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000022220afc2bbb000000000064358506b4c5c441873ade429c5a2be777578e2c6f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee22220afc2bbb0000000000c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 0}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user USDT balance after",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer1 ETH balance after",address(referer1).balance);
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function _test_SingleToCommissionOverLimit() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user USDT balance before",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000033b1292589f502000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000051b2c41ef18e27000000000000000000000000000000000000000000000000000000006784c7fc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000018000000000000000000027103bfcb475e528f54246f1847ec0e7b53dd88bda4e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee3ca20afc2bbb0000000001c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 0}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user USDT balance after",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }

    function _test_DualToCommissionOverLimit() public {
        vm.startPrank(user);
        console2.log("user ETH balance before",address(user).balance);
        console2.log("user USDT balance before",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer1 ETH balance before",address(referer1).balance);
        console2.log("Referer2 ETH balance before",address(referer2).balance);
        bytes memory data = hex"b80c2f090000000000000000000000000000000000000000000000000033b1292589f502000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000051b2c41ef18e27000000000000000000000000000000000000000000000000000000006784c7fc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000018000000000000000000027103bfcb475e528f54246f1847ec0e7b53dd88bda4e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000022220afc2bbb000000000064358506b4c5c441873ade429c5a2be777578e2c6f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee22220afc2bbb0000000001c8399efa78cacd7784751cd9fbf2523edf9efdf6ad";
        (bool s, ) = dexRouter.call{value: 0}(data);
        require(s);
        console2.log("user ETH balance after",address(user).balance);
        console2.log("user USDT balance after",IERC20(USDT).balanceOf(address(user)));
        console2.log("Referer1 ETH balance after",address(referer1).balance);
        console2.log("Referer2 ETH balance after",address(referer2).balance);
        vm.stopPrank();
    }
}